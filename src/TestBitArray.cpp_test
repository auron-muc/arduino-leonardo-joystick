#include <stdio.h>
#include "BitArrayTemplate.h"

#define SET_SIZE 64

BitArrayTemplate<SET_SIZE> mySet;

void printSet() {
	uint8_t* buf = mySet.getBuffer();

	for (int i =0; i < SET_SIZE/8; i++) {
		printf("%02x", buf[i]);
	}
	printf(" == ");
	for (int i =0; i < SET_SIZE; i++) {
		if (i % 8 ==0 ) printf(" ");
		printf("%1x", mySet.getBit(8*(i>>3) + (7-(i&7)) ));
	}
	printf("\n");
}

int main()
{

/*	printSet();
	mySet.set(0,1);
	printSet();
	mySet.set(63,1);
	printSet();
	mySet.set(63,0);
	printSet();
	mySet.set(0,0);
	printSet();
	mySet.set(16,8,(uint8_t)0xff);
	printSet();
	mySet.set(16,8,(uint8_t)0x00);
	mySet.set(15,8,(uint8_t)0xff);
	printSet();
	
	mySet.set(15,8,(uint8_t)0x00); */

    printf("e1f at 0 and 20\n"); 	
	mySet.set(0,12,(uint16_t)0x0e1f);
	mySet.set(16+4,12,(uint16_t)0x0e1f);
	printSet();
	
	printf("expecting 0e1f: %04x\n", mySet.getWord(0,12));
	printf("expecting 0e1f: %04x\n", mySet.getDWord(20,12));
	printf("expecting 1f: %02x\n", mySet.getByte(0,8));
	printf("expecting 1f: %02x\n", mySet.getBuffer()[0]);

	mySet.set(0,32,(uint32_t)0x89ABCDEF);
	printSet();

	mySet.set(0,32,(uint32_t)0);
	printSet();
	
	mySet.set(0+4,10,(uint16_t)0x0333);
	mySet.set(16+4,10,(uint16_t)0x03ff);
	printSet();
	
	return 0;
}
